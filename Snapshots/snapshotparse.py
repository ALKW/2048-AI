import sys
from NNetwork import life
from NNetwork import neural_network as network

# Single pass parser that builds a life object from a snapshot (.snp) file
# .snp files are generated by the snapshotgen.py file
class Parser:
    OP = 1
    WEIGHT = 0
    DESC = 1
    NUMBER = 2
    CONNECTIONS = 3

    def __init__(self, filename):
        if ".snp" not in filename:
            print("Invalid file type, quitting...")
            sys.exit()

        self.file = open(filename, "r")
        self.net_index = 0
        self.input = []
        self.internal = []
        self.output = []
        self.num_inputs = 0
        self.num_internal = 0
        self.num_outputs = 0
        self.ops = {"GG": self.build_gtoi_key, 
                    "GS": self.build_species_key, 
                    "NS": self.build_network,
                    "Network" : self.get_net_num,
                    "Input": self.build_input,
                    "Internal": self.build_internal,
                    "Ouptput": self.build_output}
    def clear_lists(self):
        self.input = []
        self.internal = []
        self.output = []

    def build_world(self):
        line = self.file.readline()
        while line:
            # Ignore comments
            if "#" in line:
                line = self.file.readline()
                continue

            # "$" Indicates a new category
            if "$" in line:
                choice = line.split(" ")
                self.ops[choice[Parser.OP]]()

            line = self.file.readline()
        return self.world


    def build_gtoi_key(self):
        KEY = 0
        VALUE = 1

        line = self.file.readline()
        while line:
            # If we see a "$" then we know we are in another section
            if "$" in line:
                return
            elif "#" in line:
                line = self.file.readline()
                continue
            else:
                key_val = line.split(":")
                network.Network.gene_to_innovation_key[key_val[KEY]] =  key_val[VALUE]
                network.Network.innovation_to_gene_key[key_val[VALUE]] =  key_val[KEY]
            
            # Read next line in    
            line = self.file.readline()


    def build_species_key(self):
        KEY = 0
        VALUE = 1

        line = self.file.readline()
        while line:
            # If we see a "$" then we know we are in another section
            if "$" in line:
                return
            # Skip comments
            elif "#" in line:
                line = self.file.readline()
                continue
            else:
                key_val = line.split(":")
                life.Life.species[key_val[KEY]] = key_val[VALUE]
            
            # Read next line in    
            line = self.file.readline()

    def build_network(self):
        # Initialize the life object with the a number of empty networks equal to the number of networks in the file
        line = self.file.readline()
        world_size = int(line.split(":")[1])
        self.world = network.create_init_population(world_size,                     
                    [
                    0,0,0,0,
                    0,0,0,0,
                    0,0,0,0,
                    0,0,0,0,
                    0,0,0,0,
                    0,0,0,0
                    ], 
                    ["up", "down", "left", "right"])

        # Update node information in the network
        line = self.file.readline()
        while line:
            # Skip commented lines
            if "#" in line:
                line = self.file.readline()
                continue

            # Go to the operator's section
            if "$" in line:
                choice = line.split(" ")
                self.ops[choice[OP]]()
            
            # Read next line in    
            line = self.file.readline()
        
        pass

    # Get the network number 
    def get_net_num(self, params):
        self.net_index = params[2]

    # Build/update an input node in a network
    def build_input(self):
        self.num_inputs = line.split(" ")[2]
        line = self.file.readline()
        while line:
            if "$" in line:
                return

            # Get the node and the parameters to update
            params = line.split(":")
            node = self.world.population[self.net_index].input[params[Parser.NUMBER] * -1]
            
            # Update the node's parameters
            node.weight = int(params[Parser.WEIGHT])
            node.number = int(params[Parser.NUMBER])

            # Add the node to the list of inputs so we can go back and assign connections
            self.input.append(params)

            # Read the next line
            line = self.file.readline()
    
    # Build/update an internal node in a network
    def build_internal(self):
        self.num_internal = line.split(" ")[2]
        line = self.file.readline()
        while line:
            if "$" in line:
                return

            # Make an internal node and append it to the networks list of internal nodes
            params = line.split(":")
            n = network.node.Node(weight=params[Parser.WEIGHT], desc=params[Parser.DESC], num=params[Parser.NUMBER])
            self.world.population[self.net_index].internal.append(n)

            # Read the next line in
            line = self.file.readline()

    # Build/update an output node in a network
    def build_output(self):
        self.num_outputs = line.split(" ")[2]
        line = self.file.readline()
        while line:
            if "$" in line:
                break

            # Get the node and the parameters to update
            params = line.split(":")
            self.world.population[self.net_index].output[params[Parser.NUMBER]  + self.num_inputs + 1]

            # Update the node's parameters
            node.weight = int(params[Parser.WEIGHT])
            node.number = int(params[Parser.NUMBER])
            node.desc = params[Parser.DESC]

            # Read the next line
            line = self.file.readline()

        # Build connections for input nodes
        self.build_input_connections()

        # Build connections for internal nodes
        self.build_internal_connections()

        # Build connections for output nodes
        self.build_output_connections()

        # Clear the lists for the next network
        self.clear_lists()

    def build_input_connections(self):
        # Append nodes to all input nodes connections list based on the snapshot data
        for node_params in self.input:
            # Get the node and the connections for that node
            connections = node_params[Parser.CONNECTIONS].split(",")
            node = self.world.population[self.net_index].inputs[node_params[Parser.NUMBER] * -1]

            # Add the node that corresponds to the number to the list of connections
            for connection in connections:
                # For input nodes, a node in its connection list with a negative number indicates that it is an output node
                if con_num < 0:
                    output_index = params[Parser.NUMBER] + self.num_inputs + 1
                    node.connections.append(self.world.population[self.net_index].output[output_index])
                else:
                    internal_index = connection
                    node.connections.append(self.world.population[self.net_index].internal[internal_index])

    def build_internal_connections(self):
        # Append nodes to all input nodes connections list based on the snapshot data
        for node_params in self.internal:
            # Get the node and the connections for that node
            connections = node_params[Parser.CONNECTIONS].split(",")
            node = self.world.population[self.net_index].inputs[node_params[Parser.NUMBER]]

            # Add the node that corresponds to the number to the list of connections
            for connection in connections:
                # For internal nodes, a node in its connection list with a number less than the number of input nodes indicates that it is an output node
                if con_num < self.num_inputs * -1:
                    output_index = params[Parser.NUMBER] + self.num_inputs + 1
                    node.connections.append(self.world.population[self.net_index].output[output_index])
                else:
                    input_index = params[Parser.NUMBER] * -1
                    node.connections.append(self.world.population[self.net_index].input[input_index])

    def build_output_connections(self):
        # Append nodes to all input nodes connections list based on the snapshot data
        for node_params in self.output:
            # Get the node and the connections for that node
            connections = node_params[Parser.CONNECTIONS].split(",")
            node = self.world.population[self.net_index].inputs[node_params[Parser.NUMBER] + self.num_inputs + 1]

            # Add the node that corresponds to the number to the list of connections
            for connection in connections:
                # For output nodes, a node in its connection list with a negative number indicates that it is an input node
                if con_num < 0:
                    input_index = params[Parser.NUMBER] * -1
                    node.connections.append(self.world.population[self.net_index].input[input_index])
                else:
                    internal_index = connection
                    node.connections.append(self.world.population[self.net_index].internal[internal_index])